type Area {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  committees(sort: String, limit: Int, start: Int, where: JSON): [Committee]
}

type AreaAggregator {
  count: Int
  totalCount: Int
}

type AreaConnection {
  values: [Area]
  groupBy: AreaGroupBy
  aggregate: AreaAggregator
}

type AreaConnection_id {
  key: ID
  connection: AreaConnection
}

type AreaConnectionCreatedAt {
  key: DateTime
  connection: AreaConnection
}

type AreaConnectionId {
  key: ID
  connection: AreaConnection
}

type AreaConnectionName {
  key: String
  connection: AreaConnection
}

type AreaConnectionUpdatedAt {
  key: DateTime
  connection: AreaConnection
}

type AreaGroupBy {
  _id: [AreaConnection_id]
  id: [AreaConnectionId]
  createdAt: [AreaConnectionCreatedAt]
  updatedAt: [AreaConnectionUpdatedAt]
  name: [AreaConnectionName]
}

input AreaInput {
  name: String
  committees: [ID]
}

type Committee {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  parent: Committee
  area: Area
  meetings(sort: String, limit: Int, start: Int, where: JSON): [Meeting]
}

type CommitteeAggregator {
  count: Int
  totalCount: Int
}

type CommitteeConnection {
  values: [Committee]
  groupBy: CommitteeGroupBy
  aggregate: CommitteeAggregator
}

type CommitteeConnection_id {
  key: ID
  connection: CommitteeConnection
}

type CommitteeConnectionArea {
  key: ID
  connection: CommitteeConnection
}

type CommitteeConnectionCreatedAt {
  key: DateTime
  connection: CommitteeConnection
}

type CommitteeConnectionId {
  key: ID
  connection: CommitteeConnection
}

type CommitteeConnectionName {
  key: String
  connection: CommitteeConnection
}

type CommitteeConnectionParent {
  key: ID
  connection: CommitteeConnection
}

type CommitteeConnectionUpdatedAt {
  key: DateTime
  connection: CommitteeConnection
}

type CommitteeGroupBy {
  _id: [CommitteeConnection_id]
  id: [CommitteeConnectionId]
  createdAt: [CommitteeConnectionCreatedAt]
  updatedAt: [CommitteeConnectionUpdatedAt]
  name: [CommitteeConnectionName]
  parent: [CommitteeConnectionParent]
  area: [CommitteeConnectionArea]
}

input CommitteeInput {
  name: String
  parent: ID
  meetings: [ID]
  area: ID
}

input createAreaInput {
  data: AreaInput
}

type createAreaPayload {
  area: Area
}

input createCommitteeInput {
  data: CommitteeInput
}

type createCommitteePayload {
  committee: Committee
}

input createMeetingInput {
  data: MeetingInput
}

type createMeetingPayload {
  meeting: Meeting
}

input createPlanInput {
  data: PlanInput
}

type createPlanPayload {
  plan: Plan
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteAreaInput {
  where: InputID
}

type deleteAreaPayload {
  area: Area
}

input deleteCommitteeInput {
  where: InputID
}

type deleteCommitteePayload {
  committee: Committee
}

input deleteMeetingInput {
  where: InputID
}

type deleteMeetingPayload {
  meeting: Meeting
}

input deletePlanInput {
  where: InputID
}

type deletePlanPayload {
  plan: Plan
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editAreaInput {
  name: String
  committees: [ID]
}

input editCommitteeInput {
  name: String
  parent: ID
  meetings: [ID]
  area: ID
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editMeetingInput {
  date: DateTime
  sid: Int
  committee: ID
  desicions: ID
  protocol: ID
  transcript: ID
  plans: [ID]
}

input editPlanInput {
  name: String
  status: String
  lastUpdate: DateTime
  location: String
  municipality: String
  settlement: String
  sections: String
  meetings: [ID]
  type: String
  sid: String
  targets: String
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

type Meeting {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  date: DateTime
  sid: Int!
  committee: Committee
  desicions: UploadFile
  protocol: UploadFile
  transcript: UploadFile
  plans(sort: String, limit: Int, start: Int, where: JSON): [Plan]
}

type MeetingAggregator {
  count: Int
  totalCount: Int
}

type MeetingConnection {
  values: [Meeting]
  groupBy: MeetingGroupBy
  aggregate: MeetingAggregator
}

type MeetingConnection_id {
  key: ID
  connection: MeetingConnection
}

type MeetingConnectionCommittee {
  key: ID
  connection: MeetingConnection
}

type MeetingConnectionCreatedAt {
  key: DateTime
  connection: MeetingConnection
}

type MeetingConnectionDate {
  key: DateTime
  connection: MeetingConnection
}

type MeetingConnectionDesicions {
  key: ID
  connection: MeetingConnection
}

type MeetingConnectionId {
  key: ID
  connection: MeetingConnection
}

type MeetingConnectionProtocol {
  key: ID
  connection: MeetingConnection
}

type MeetingConnectionSid {
  key: Int
  connection: MeetingConnection
}

type MeetingConnectionTranscript {
  key: ID
  connection: MeetingConnection
}

type MeetingConnectionUpdatedAt {
  key: DateTime
  connection: MeetingConnection
}

type MeetingGroupBy {
  _id: [MeetingConnection_id]
  id: [MeetingConnectionId]
  createdAt: [MeetingConnectionCreatedAt]
  updatedAt: [MeetingConnectionUpdatedAt]
  date: [MeetingConnectionDate]
  sid: [MeetingConnectionSid]
  committee: [MeetingConnectionCommittee]
  desicions: [MeetingConnectionDesicions]
  protocol: [MeetingConnectionProtocol]
  transcript: [MeetingConnectionTranscript]
}

input MeetingInput {
  date: DateTime
  sid: Int!
  committee: ID
  desicions: ID
  protocol: ID
  transcript: ID
  plans: [ID]
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Area | createAreaPayload | updateAreaPayload | deleteAreaPayload | AreaConnection | AreaAggregator | AreaGroupBy | AreaConnection_id | AreaConnectionId | AreaConnectionCreatedAt | AreaConnectionUpdatedAt | AreaConnectionName | Committee | createCommitteePayload | updateCommitteePayload | deleteCommitteePayload | CommitteeConnection | CommitteeAggregator | CommitteeGroupBy | CommitteeConnection_id | CommitteeConnectionId | CommitteeConnectionCreatedAt | CommitteeConnectionUpdatedAt | CommitteeConnectionName | CommitteeConnectionParent | CommitteeConnectionArea | Meeting | createMeetingPayload | updateMeetingPayload | deleteMeetingPayload | MeetingConnection | MeetingAggregator | MeetingGroupBy | MeetingConnection_id | MeetingConnectionId | MeetingConnectionCreatedAt | MeetingConnectionUpdatedAt | MeetingConnectionDate | MeetingConnectionSid | MeetingConnectionCommittee | MeetingConnectionDesicions | MeetingConnectionProtocol | MeetingConnectionTranscript | Plan | createPlanPayload | updatePlanPayload | deletePlanPayload | PlanConnection | PlanAggregator | PlanGroupBy | PlanConnection_id | PlanConnectionId | PlanConnectionCreatedAt | PlanConnectionUpdatedAt | PlanConnectionName | PlanConnectionStatus | PlanConnectionLastUpdate | PlanConnectionLocation | PlanConnectionMunicipality | PlanConnectionSettlement | PlanConnectionSections | PlanConnectionType | PlanConnectionSid | PlanConnectionTargets | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionId | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createArea(input: createAreaInput): createAreaPayload
  updateArea(input: updateAreaInput): updateAreaPayload
  deleteArea(input: deleteAreaInput): deleteAreaPayload
  createCommittee(input: createCommitteeInput): createCommitteePayload
  updateCommittee(input: updateCommitteeInput): updateCommitteePayload
  deleteCommittee(input: deleteCommitteeInput): deleteCommitteePayload
  createMeeting(input: createMeetingInput): createMeetingPayload
  updateMeeting(input: updateMeetingInput): updateMeetingPayload
  deleteMeeting(input: deleteMeetingInput): deleteMeetingPayload
  createPlan(input: createPlanInput): createPlanPayload
  updatePlan(input: updatePlanInput): updatePlanPayload
  deletePlan(input: deletePlanInput): deletePlanPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Plan {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  status: String
  lastUpdate: DateTime
  location: String
  municipality: String
  settlement: String
  sections: String
  type: String
  sid: String!
  targets: String
  meetings(sort: String, limit: Int, start: Int, where: JSON): [Meeting]
}

type PlanAggregator {
  count: Int
  totalCount: Int
}

type PlanConnection {
  values: [Plan]
  groupBy: PlanGroupBy
  aggregate: PlanAggregator
}

type PlanConnection_id {
  key: ID
  connection: PlanConnection
}

type PlanConnectionCreatedAt {
  key: DateTime
  connection: PlanConnection
}

type PlanConnectionId {
  key: ID
  connection: PlanConnection
}

type PlanConnectionLastUpdate {
  key: DateTime
  connection: PlanConnection
}

type PlanConnectionLocation {
  key: String
  connection: PlanConnection
}

type PlanConnectionMunicipality {
  key: String
  connection: PlanConnection
}

type PlanConnectionName {
  key: String
  connection: PlanConnection
}

type PlanConnectionSections {
  key: String
  connection: PlanConnection
}

type PlanConnectionSettlement {
  key: String
  connection: PlanConnection
}

type PlanConnectionSid {
  key: String
  connection: PlanConnection
}

type PlanConnectionStatus {
  key: String
  connection: PlanConnection
}

type PlanConnectionTargets {
  key: String
  connection: PlanConnection
}

type PlanConnectionType {
  key: String
  connection: PlanConnection
}

type PlanConnectionUpdatedAt {
  key: DateTime
  connection: PlanConnection
}

type PlanGroupBy {
  _id: [PlanConnection_id]
  id: [PlanConnectionId]
  createdAt: [PlanConnectionCreatedAt]
  updatedAt: [PlanConnectionUpdatedAt]
  name: [PlanConnectionName]
  status: [PlanConnectionStatus]
  lastUpdate: [PlanConnectionLastUpdate]
  location: [PlanConnectionLocation]
  municipality: [PlanConnectionMunicipality]
  settlement: [PlanConnectionSettlement]
  sections: [PlanConnectionSections]
  type: [PlanConnectionType]
  sid: [PlanConnectionSid]
  targets: [PlanConnectionTargets]
}

input PlanInput {
  name: String
  status: String
  lastUpdate: DateTime
  location: String
  municipality: String
  settlement: String
  sections: String
  meetings: [ID]
  type: String
  sid: String!
  targets: String
}

type Query {
  area(id: ID!): Area
  areas(sort: String, limit: Int, start: Int, where: JSON): [Area]
  areasConnection(sort: String, limit: Int, start: Int, where: JSON): AreaConnection
  committee(id: ID!): Committee
  committees(sort: String, limit: Int, start: Int, where: JSON): [Committee]
  committeesConnection(sort: String, limit: Int, start: Int, where: JSON): CommitteeConnection
  meeting(id: ID!): Meeting
  meetings(sort: String, limit: Int, start: Int, where: JSON): [Meeting]
  meetingsConnection(sort: String, limit: Int, start: Int, where: JSON): MeetingConnection
  plan(id: ID!): Plan
  plans(sort: String, limit: Int, start: Int, where: JSON): [Plan]
  plansConnection(sort: String, limit: Int, start: Int, where: JSON): PlanConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateAreaInput {
  where: InputID
  data: editAreaInput
}

type updateAreaPayload {
  area: Area
}

input updateCommitteeInput {
  where: InputID
  data: editCommitteeInput
}

type updateCommitteePayload {
  committee: Committee
}

input updateMeetingInput {
  where: InputID
  data: editMeetingInput
}

type updateMeetingPayload {
  meeting: Meeting
}

input updatePlanInput {
  where: InputID
  data: editPlanInput
}

type updatePlanPayload {
  plan: Plan
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  id: [UploadFileConnectionId]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  id: [UsersPermissionsUserConnectionId]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
